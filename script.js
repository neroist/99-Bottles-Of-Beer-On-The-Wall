/* Generated by the Nim Compiler v1.6.4 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555125 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI654321353 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI654321832 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI654321832 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI654321353, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI654321832.node = NNI654321832;
var NNI33555125 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555125.node = NNI33555125;
var NNI33555114 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555114.node = NNI33555114;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555114.base = NTI33555112;
NTI33555125.base = NTI33555114;

function mnewString(len_33556894) {
        return new Array(len_33556894);
  

  
}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(60, 62, 94);
var ConstSet2 = setConstr(60, 62, 94);
var ConstSet3 = setConstr(45, 43, 32);
var ConstSet4 = setConstr([48, 57]);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([65, 90], [97, 122]);

function makeNimstrLit(c_33556802) {
      var result = [];
  for (var i = 0; i < c_33556802.length; ++i) {
    result[i] = c_33556802.charCodeAt(i);
  }
  return result;
  

  
}
var ConstSet8 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557141, src_33557142, ti_33557143) {
  var result_33557152 = null;

    switch (ti_33557143.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557132(ti_33557143))) {
      result_33557152 = src_33557142;
      }
      else {
        result_33557152 = [src_33557142[0], src_33557142[1]];
      }
      
      break;
    case 19:
            if (dest_33557141 === null || dest_33557141 === undefined) {
        dest_33557141 = {};
      }
      else {
        for (var key in dest_33557141) { delete dest_33557141[key]; }
      }
      for (var key in src_33557142) { dest_33557141[key] = src_33557142[key]; }
      result_33557152 = dest_33557141;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557143.base == null))) {
      result_33557152 = nimCopy(dest_33557141, src_33557142, ti_33557143.base);
      }
      else {
      if ((ti_33557143.kind == 17)) {
      result_33557152 = (dest_33557141 === null || dest_33557141 === undefined) ? {m_type: ti_33557143} : dest_33557141;
      }
      else {
        result_33557152 = (dest_33557141 === null || dest_33557141 === undefined) ? {} : dest_33557141;
      }
      }
      nimCopyAux(result_33557152, src_33557142, ti_33557143.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557142 === null) {
        result_33557152 = null;
      }
      else {
        if (dest_33557141 === null || dest_33557141 === undefined || dest_33557141.length != src_33557142.length) {
          dest_33557141 = new Array(src_33557142.length);
        }
        result_33557152 = dest_33557141;
        for (var i = 0; i < src_33557142.length; ++i) {
          result_33557152[i] = nimCopy(result_33557152[i], src_33557142[i], ti_33557143.base);
        }
      }
    
      break;
    case 28:
            if (src_33557142 !== null) {
        result_33557152 = src_33557142.slice(0);
      }
    
      break;
    default: 
      result_33557152 = src_33557142;
      break;
    }

  return result_33557152;

}

function toJSStr(s_33556808) {
                    var Temporary5;
            var Temporary7;

  var result_33556809 = null;

    var res_33556843 = newSeq_33556826((s_33556808).length);
    var i_33556844 = 0;
    var j_33556845 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556844 < (s_33556808).length)) break Label2;
          var c_33556846 = s_33556808[i_33556844];
          if ((c_33556846 < 128)) {
          res_33556843[j_33556845] = String.fromCharCode(c_33556846);
          i_33556844 += 1;
          }
          else {
            var helper_33556858 = newSeq_33556826(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556859 = c_33556846.toString(16);
                  if ((((code_33556859) == null ? 0 : (code_33556859).length) == 1)) {
                  helper_33556858.push("%0");;
                  }
                  else {
                  helper_33556858.push("%");;
                  }
                  
                  helper_33556858.push(code_33556859);;
                  i_33556844 += 1;
                    if (((s_33556808).length <= i_33556844)) Temporary5 = true; else {                      Temporary5 = (s_33556808[i_33556844] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556846 = s_33556808[i_33556844];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556843[j_33556845] = decodeURIComponent(helper_33556858.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556843[j_33556845] = helper_33556858.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556845 += 1;
        }
    } while (false);
    if (res_33556843.length < j_33556845) { for (var i = res_33556843.length ; i < j_33556845 ; ++i) res_33556843.push(null); }
               else { res_33556843.length = j_33556845; };
    result_33556809 = res_33556843.join("");

  return result_33556809;

}

function raiseException(e_33556668, ename_33556669) {
    e_33556668.name = ename_33556669;
    if ((excHandler == 0)) {
    unhandledException(e_33556668);
    }
    
    throw e_33556668;

  
}

function nimCharToStr(x_33556518) {
  var result_33556519 = [];

    result_33556519 = nimCopy(null, mnewString(1), NTI33554439);
    result_33556519[0] = x_33556518;

  return result_33556519;

}

function addChar(x_33557256, c_33557257) {
    x_33557256.push(c_33557257);

  
}
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}


function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = (old_251658421 + n_251658420));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_452984947 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_452984947 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_452984947;
            result_251658417[result_251658417_Idx][(old_251658421 + iHEX60gensym4_251658435)] = x_251658418.charCodeAt((start_251658419 + iHEX60gensym4_251658435));
            i_452984947 += 1;
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_318767107(x_318767108) {
  var result_318767109 = [[]];

    addInt_251658457(result_318767109, 0, x_318767108);

  return result_318767109[0];

}

function parseSaturatedNatural_637534524(s_637534525, b_637534526, b_637534526_Idx, start_637534527) {
      var Temporary1;
          var Temporary4;

  var result_637534528 = 0;

    var i_637534529 = start_637534527;
    if (((i_637534529 < (s_637534525).length) && (s_637534525[i_637534529] == 43))) {
    i_637534529 += 1;
    }
    
      if (!(i_637534529 < (s_637534525).length)) Temporary1 = false; else {        Temporary1 = (ConstSet5[s_637534525[i_637534529]] != undefined);      }    if (Temporary1) {
    b_637534526[b_637534526_Idx] = 0;
    Label2: do {
        Label3: while (true) {
          if (!(i_637534529 < (s_637534525).length)) Temporary4 = false; else {            Temporary4 = (ConstSet6[s_637534525[i_637534529]] != undefined);          }        if (!Temporary4) break Label3;
          var c_637534548 = (s_637534525[i_637534529] - 48);
          if ((b_637534526[b_637534526_Idx] <= Math.trunc((2147483647 - c_637534548) / 10))) {
          b_637534526[b_637534526_Idx] = ((b_637534526[b_637534526_Idx] * 10) + c_637534548);
          }
          else {
            b_637534526[b_637534526_Idx] = 2147483647;
          }
          
          i_637534529 += 1;
          Label5: do {
              Label6: while (true) {
              if (!((i_637534529 < (s_637534525).length) && (s_637534525[i_637534529] == 95))) break Label6;
                i_637534529 += 1;
              }
          } while (false);
        }
    } while (false);
    result_637534528 = (i_637534529 - start_637534527);
    }
    

  return result_637534528;

}

function isFatPointer_33557132(ti_33557133) {
  var result_33557134 = false;

  BeforeRet: do {
    result_33557134 = !((ConstSet8[ti_33557133.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557134;

}

function nimCopyAux(dest_33557145, src_33557146, n_33557147) {
    switch (n_33557147.kind) {
    case 0:
      break;
    case 1:
            dest_33557145[n_33557147.offset] = nimCopy(dest_33557145[n_33557147.offset], src_33557146[n_33557147.offset], n_33557147.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557147.sons.length; i++) {
      nimCopyAux(dest_33557145, src_33557146, n_33557147.sons[i]);
    }
    
      break;
    case 3:
            dest_33557145[n_33557147.offset] = nimCopy(dest_33557145[n_33557147.offset], src_33557146[n_33557147.offset], n_33557147.typ);
      for (var i = 0; i < n_33557147.sons.length; ++i) {
        nimCopyAux(dest_33557145, src_33557146, n_33557147.sons[i][1]);
      }
    
      break;
    }

  
}

function HEX5BHEX5D_654314665(s_654314668, x_654314669) {
  var result_654314670 = [];

    var a_654314672 = x_654314669.a;
    var L_654314674 = ((((s_654314668).length - x_654314669.b) - a_654314672) + 1);
    result_654314670 = nimCopy(null, mnewString(L_654314674), NTI33554439);
    Label1: do {
      var i_654314679 = 0;
      var i_452984952 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_452984952 < L_654314674)) break Label3;
            i_654314679 = i_452984952;
            result_654314670[i_654314679] = s_654314668[(i_654314679 + a_654314672)];
            i_452984952 += 1;
          }
      } while (false);
    } while (false);

  return result_654314670;

}

function HEX2EHEX2E_654314638(a_654314641, b_654314642) {
  var result_654314645 = ({a: 0, b: 0});

    result_654314645 = nimCopy(result_654314645, {a: a_654314641, b: b_654314642}, NTI654321832);

  return result_654314645;

}

function add_33556420(x_33556421, x_33556421_Idx, y_33556422) {
          if (x_33556421[x_33556421_Idx] === null) { x_33556421[x_33556421_Idx] = []; }
      var off = x_33556421[x_33556421_Idx].length;
      x_33556421[x_33556421_Idx].length += y_33556422.length;
      for (var i = 0; i < y_33556422.length; ++i) {
        x_33556421[x_33556421_Idx][off+i] = y_33556422.charCodeAt(i);
      }
    

  
}

function newSeq_33556826(len_33556828) {
  var result_33556829 = [];

    result_33556829 = new Array(len_33556828); for (var i = 0 ; i < len_33556828 ; ++i) { result_33556829[i] = null; }
  return result_33556829;

}

function unhandledException(e_33556664) {
    var buf_33556665 = [[]];
    if (!(((e_33556664.message).length == 0))) {
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556665[0].push.apply(buf_33556665[0], e_33556664.message);;
    }
    else {
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit(" ["));;
    add_33556420(buf_33556665, 0, e_33556664.name);
    buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556666 = toJSStr(buf_33556665[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556666);
  }
  else {
    throw cbuf_33556666;
  }
  

  
}

function parseStandardFormatSpecifier_603979832(s_603979833, start_603979834, ignoreUnknownSuffix_603979835) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_603979836 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

    result_603979836.fill = 32;
    result_603979836.align = 0;
    result_603979836.sign = 45;
    var i_603979838 = start_603979834;
    if ((((i_603979838 + 1) < (s_603979833).length) && (ConstSet1[s_603979833[(i_603979838 + 1)]] != undefined))) {
    result_603979836.fill = s_603979833[i_603979838];
    result_603979836.align = s_603979833[(i_603979838 + 1)];
    i_603979838 += 2;
    }
    else {
    if (((i_603979838 < (s_603979833).length) && (ConstSet2[s_603979833[i_603979838]] != undefined))) {
    result_603979836.align = s_603979833[i_603979838];
    i_603979838 += 1;
    }
    }
    if (((i_603979838 < (s_603979833).length) && (ConstSet3[s_603979833[i_603979838]] != undefined))) {
    result_603979836.sign = s_603979833[i_603979838];
    i_603979838 += 1;
    }
    
    if (((i_603979838 < (s_603979833).length) && (s_603979833[i_603979838] == 35))) {
    result_603979836.alternateForm = true;
    i_603979838 += 1;
    }
    
      if (!(((i_603979838 + 1) < (s_603979833).length) && (s_603979833[i_603979838] == 48))) Temporary1 = false; else {        Temporary1 = (ConstSet4[s_603979833[(i_603979838 + 1)]] != undefined);      }    if (Temporary1) {
    result_603979836.padWithZero = true;
    i_603979838 += 1;
    }
    
    var parsedLength_603979875 = parseSaturatedNatural_637534524(s_603979833, result_603979836, "minimumWidth", i_603979838);
    i_603979838 += parsedLength_603979875;
    if (((i_603979838 < (s_603979833).length) && (s_603979833[i_603979838] == 46))) {
    i_603979838 += 1;
    var parsedLengthB_603979884 = parseSaturatedNatural_637534524(s_603979833, result_603979836, "precision", i_603979838);
    i_603979838 += parsedLengthB_603979884;
    }
    else {
      result_603979836.precision = -1;
    }
    
      if (!(i_603979838 < (s_603979833).length)) Temporary2 = false; else {        Temporary2 = (ConstSet7[s_603979833[i_603979838]] != undefined);      }    if (Temporary2) {
    result_603979836.typ = s_603979833[i_603979838];
    i_603979838 += 1;
    }
    
    result_603979836.endPosition = i_603979838;
      if (!!((i_603979838 == (s_603979833).length))) Temporary3 = false; else {        Temporary3 = !(ignoreUnknownSuffix_603979835);      }    if (Temporary3) {
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_654314665(s_603979833, HEX2EHEX2E_654314638(i_603979838, 1)) || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_603979836;

}

function mkDigit_603979781(v_603979782, typ_603979783) {
      var Temporary1;

  var result_603979784 = [];

    if ((v_603979782 < 10)) {
    result_603979784 = nimCopy(null, nimCharToStr((48 + v_603979782)), NTI33554439);
    }
    else {
      if ((typ_603979783 == 120)) {
      Temporary1 = 97;
      }
      else {
      Temporary1 = 65;
      }
      
      result_603979784 = nimCopy(null, nimCharToStr(((Temporary1 + v_603979782) - 10)), NTI33554439);
    }
    

  return result_603979784;

}

function nsuRepeatChar(c_687866869, count_687866870) {
  var result_687866871 = [];

    result_687866871 = nimCopy(null, mnewString(count_687866870), NTI33554439);
    Label1: do {
      var i_687866876 = 0;
      var colontmp__452984966 = 0;
      colontmp__452984966 = (count_687866870 - 1);
      var res_452984967 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_452984967 <= colontmp__452984966)) break Label3;
            i_687866876 = res_452984967;
            result_687866871[i_687866876] = c_687866869;
            res_452984967 += 1;
          }
      } while (false);
    } while (false);

  return result_687866871;

}

function formatInt_452984868(n_452984870, radix_452984871, spec_452984872) {
    var Temporary1;
    var Temporary8;

  var result_452984873 = [];

    var n_452984876 = n_452984870;
    var negative_452984877 = (n_452984876 < 0);
    if (negative_452984877) {
    Temporary1 = ((~(n_452984876) + 1) );
    }
    else {
    Temporary1 = n_452984876;
    }
    
    var v_452984878 = Temporary1;
    var xx_452984879 = [];
    if (spec_452984872.alternateForm) {
    switch (spec_452984872.typ) {
    case 88:
      xx_452984879 = nimCopy(null, makeNimstrLit("0x"), NTI33554439);
      break;
    case 120:
      xx_452984879 = nimCopy(null, makeNimstrLit("0x"), NTI33554439);
      break;
    case 98:
      xx_452984879 = nimCopy(null, makeNimstrLit("0b"), NTI33554439);
      break;
    case 111:
      xx_452984879 = nimCopy(null, makeNimstrLit("0o"), NTI33554439);
      break;
    default: 
      break;
    }
    }
    
    if ((v_452984878 == 0)) {
    result_452984873 = nimCopy(null, makeNimstrLit("0"), NTI33554439);
    }
    else {
      result_452984873 = nimCopy(null, [], NTI33554439);
      Label2: do {
          Label3: while (true) {
          if (!(0 < v_452984878)) break Label3;
            var d_452984880 = (v_452984878 % radix_452984871);
            v_452984878 = Math.trunc(((v_452984878 / radix_452984871) ));
            result_452984873.push.apply(result_452984873, mkDigit_603979781(d_452984880, spec_452984872.typ));;
          }
      } while (false);
      Label4: do {
        var idx_452984885 = 0;
        var colontmp__452984958 = 0;
        colontmp__452984958 = Math.trunc((result_452984873).length / 2);
        var i_452984959 = 0;
        Label5: do {
            Label6: while (true) {
            if (!(i_452984959 < colontmp__452984958)) break Label6;
              idx_452984885 = i_452984959;
              var Temporary7 = result_452984873[idx_452984885]; result_452984873[idx_452984885] = result_452984873[(((result_452984873).length - idx_452984885) - 1)]; result_452984873[(((result_452984873).length - idx_452984885) - 1)] = Temporary7;              i_452984959 += 1;
            }
        } while (false);
      } while (false);
    }
    
    if (spec_452984872.padWithZero) {
    if (negative_452984877) Temporary8 = true; else {      Temporary8 = !((spec_452984872.sign == 45));    }    var sign_452984890 = Temporary8;
    var toFill_452984894 = (((spec_452984872.minimumWidth - (result_452984873).length) - (xx_452984879).length) - (sign_452984890 ? 1 : 0));
    if ((0 < toFill_452984894)) {
    result_452984873 = nimCopy(null, (nsuRepeatChar(48, toFill_452984894) || []).concat(result_452984873 || []), NTI33554439);
    }
    
    }
    
    if (negative_452984877) {
    result_452984873 = nimCopy(null, (makeNimstrLit("-") || []).concat(xx_452984879 || [],result_452984873 || []), NTI33554439);
    }
    else {
    if (!((spec_452984872.sign == 45))) {
    result_452984873 = nimCopy(null, [spec_452984872.sign].concat(xx_452984879 || [],result_452984873 || []), NTI33554439);
    }
    else {
      result_452984873 = nimCopy(null, (xx_452984879 || []).concat(result_452984873 || []), NTI33554439);
    }
    }
    if ((spec_452984872.align == 60)) {
    Label9: do {
      var i_452984899 = 0;
      var colontmp__452984962 = 0;
      colontmp__452984962 = (result_452984873).length;
      var i_452984963 = colontmp__452984962;
      Label10: do {
          Label11: while (true) {
          if (!(i_452984963 < spec_452984872.minimumWidth)) break Label11;
            i_452984899 = i_452984963;
            addChar(result_452984873, spec_452984872.fill);;
            i_452984963 += 1;
          }
      } while (false);
    } while (false);
    }
    else {
      var toFill_452984900 = (spec_452984872.minimumWidth - (result_452984873).length);
      if ((spec_452984872.align == 94)) {
      var half_452984901 = Math.trunc(toFill_452984900 / 2);
      result_452984873 = nimCopy(null, (nsuRepeatChar(spec_452984872.fill, half_452984901) || []).concat(result_452984873 || [],nsuRepeatChar(spec_452984872.fill, (toFill_452984900 - half_452984901)) || []), NTI33554439);
      }
      else {
        if ((0 < toFill_452984900)) {
        result_452984873 = nimCopy(null, (nsuRepeatChar(spec_452984872.fill, toFill_452984900) || []).concat(result_452984873 || []), NTI33554439);
        }
        
      }
      
    }
    

  return result_452984873;

}

function formatValue_452984860(result_452984862, result_452984862_Idx, value_452984863, specifier_452984864) {
  BeforeRet: do {
    if (((specifier_452984864).length == 0)) {
    result_452984862[result_452984862_Idx].push.apply(result_452984862[result_452984862_Idx], HEX24_318767107(((value_452984863) | 0)));;
    break BeforeRet;
    }
    
    var spec_452984865 = parseStandardFormatSpecifier_603979832(specifier_452984864, 0, false);
    var radix_452984866 = 10;
    switch (spec_452984865.typ) {
    case 120:
    case 88:
      radix_452984866 = 16;
      break;
    case 100:
    case 0:
      break;
    case 98:
      radix_452984866 = 2;
      break;
    case 111:
      radix_452984866 = 8;
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_452984865.typ]), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    result_452984862[result_452984862_Idx].push.apply(result_452984862[result_452984862_Idx], formatInt_452984868(value_452984863, radix_452984866, spec_452984865));;
  } while (false);

  
}

function bottlesOfBeerOnTheWall(bottles_452984835) {
  var result_452984836 = [];

    Label1: do {
      var bottlesNum_452984849 = 0;
      var res_452984941 = ((bottles_452984835) | 0);
      Label2: do {
          Label3: while (true) {
          if (!(1 <= res_452984941)) break Label3;
            bottlesNum_452984849 = ((res_452984941) | 0);
            var fmtRes_452984854 = [mnewString(0)];
            formatValue_452984860(fmtRes_452984854, 0, bottlesNum_452984849, []);
            fmtRes_452984854[0].push.apply(fmtRes_452984854[0], makeNimstrLit(" bottles of beer on the wall, "));;
            formatValue_452984860(fmtRes_452984854, 0, bottlesNum_452984849, []);
            fmtRes_452984854[0].push.apply(fmtRes_452984854[0], makeNimstrLit(" bottles of beer.\x0A\x0A"));;
            result_452984836.push(toJSStr(fmtRes_452984854[0]));;
            if ((bottlesNum_452984849 == 1)) {
            result_452984836.push("Take one down and pass it around, no more bottles of beer on the wall.\n");;
            result_452984836.push("No more bottles of beer on the wall, no more bottles of beer.");;
            var fmtRes_452984919 = [mnewString(0)];
            fmtRes_452984919[0].push.apply(fmtRes_452984919[0], makeNimstrLit("Go to the store and buy some more, "));;
            formatValue_452984860(fmtRes_452984919, 0, bottles_452984835, []);
            fmtRes_452984919[0].push.apply(fmtRes_452984919[0], makeNimstrLit(" bottles of beer on the wall."));;
            result_452984836.push(toJSStr(fmtRes_452984919[0]));;
            }
            else {
              var fmtRes_452984929 = [mnewString(0)];
              fmtRes_452984929[0].push.apply(fmtRes_452984929[0], makeNimstrLit("Take one down and pass it around, "));;
              formatValue_452984860(fmtRes_452984929, 0, bottlesNum_452984849, []);
              fmtRes_452984929[0].push.apply(fmtRes_452984929[0], makeNimstrLit(" bottles of beer on the wall.\x0A"));;
            result_452984836.push(toJSStr(fmtRes_452984929[0]));;
            }
            
            res_452984941 -= 1;
          }
      } while (false);
    } while (false);

  return result_452984836;

}
